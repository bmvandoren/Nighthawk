# pyproject.toml for `nighthawk` pip package.
#
# To create a Python environment named `nighthawk-dev` in which to work
# on the `nighthawk` package:
#
#     conda create -n nighthawk-dev python=3.10
#     conda activate nighthawk-dev
#     pip install -e <nighthawk package dir path>
#     pip install build twine
#
# To build the `nighthawk` package, issue the following commands from
# within the directory containing this file:
#
#     conda activate nighthawk-dev
#     python -m build
#
# The build process will write package `.tar.gz` and `.whl` files to the
# `dist` subdirectory of the directory containing this file.
#
# To upload a built package to the test Python package index:
#
#     conda activate nighthawk-dev
#     python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
#     python -m twine upload --repository nighthawk-test dist/* --verbose
#
# To upload a built package to the real Python package index:
#
#     conda activate nighthawk-dev
#     python -m twine upload --repository nighthawk-prod dist/* --verbose
#     python -m twine upload dist/*
#
# Release checklist:
#
#     0. Test, test, test!
#
#     1. Update package version number below. Commit and push to GitHub repo.
#
#     2. Update README.md, including with new version number. Commit and
#        push to GitHub repo.
#
#     3. Tag Git commit with version number. From the directory containing
#        this file, do something like (but with the correct version number):
#
#            git tag v0.1.0               # creates tag in local repo
#            git push origin v0.1.0       # pushes tag to GitHub repo
#
#        If for some reason you wind up wanting to move the tag to a
#        different commit (you probably will some day):
#
#            git tag -d v0.1.0            # deletes tag from local repo
#            git push origin :v0.1.0      # pushes tag deletion to GitHub repo
#
#     4. Build package (see commands above).
#
#     5. Upload package to PyPI test (see commands above).
#
#     6. Sanity check installation and execution. Use the following command
#        in a fresh environment to install from the test repository. The
#        extra-index-url argument looks in test.pypi.org but also allows pip
#        to look outside too, for installing dependencies.
#
#			       pip install --extra-index-url https://test.pypi.org/simple/ nighthawk==0.3.1
#
#     7. Upload package to PyPI prod (see commands above).	
#
#     8. Create release in GitHub. Choose the tag created above for the
#        release. Give the release the same name as the tag. Write
#        release notes.
#
#     9. Announce.

[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[project]
name = 'nighthawk'
version = '0.3.1'
description = 'Nighthawk avian nocturnal flight call detector'
readme = 'README.md'
requires-python = '~=3.10.0'
license = {file = 'LICENSE'}
authors = [
  {name = 'Benjamin Van Doren', email = 'vandoren@cornell.edu'},
]
classifiers = [
    'Programming Language :: Python :: 3',
    'Operating System :: OS Independent',
]
dependencies = [
    'librosa~=0.10.0',
    'pandas~=2.2.0',
    'pyyaml',
    'tensorflow~=2.12.0;platform_system != "Darwin" or platform_machine != "arm64"',
    'tensorflow-macos~=2.12.0;platform_system == "Darwin" and platform_machine == "arm64"',
]

[project.urls]
'Bug Tracker' = 'https://github.com/bmvandoren/nighthawk/issues'
'Source Code' = 'https://github.com/bmvandoren/nighthawk'

[project.scripts]
nighthawk = 'nighthawk.run_nighthawk:main'
prep_feedback = 'nighthawk.prep_feedback:main'

[tool.hatch.build]
exclude = ["instructions*"]